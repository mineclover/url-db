# MCP-Friendly API Descriptions
# Natural language descriptions for Model Context Protocol integration

server:
  name: "URL Database Server"
  description: "A comprehensive URL management system with domain organization, attribute tagging, and search capabilities. Supports both REST API and MCP protocol for seamless integration with AI tools."
  capabilities:
    - "Organize URLs by domain with metadata management"
    - "Tag URLs with custom attributes for categorization"
    - "Search and filter URLs by content and attributes"
    - "Batch operations for efficient bulk management"
    - "Real-time attribute management with ordering support"

tools:
  # Domain Management
  list_domains:
    name: "list_domains"
    description: "Retrieve all available domains with their metadata and URL counts. Essential for understanding the organizational structure of stored URLs."
    usage: "Use when you need to see what domains are available or get domain statistics before working with URLs."
    
  create_domain:
    name: "create_domain"
    description: "Create a new domain for organizing URLs. Domains act as namespaces that group related URLs together."
    usage: "Use when adding URLs from a new website or creating a new category for URL organization."
    
  get_domain:
    name: "get_domain"
    description: "Get detailed information about a specific domain including its description and metadata."
    usage: "Use when you need details about a particular domain before adding URLs or attributes."

  # URL/Node Management  
  list_nodes:
    name: "list_nodes"
    description: "List all URLs (nodes) within a domain with pagination and search support. Returns URL metadata including titles and descriptions."
    usage: "Use to browse URLs in a domain, search for specific content, or get an overview of stored URLs."
    
  create_node:
    name: "create_node"
    description: "Add a new URL to a domain with optional title and description. The URL becomes searchable and can have attributes attached."
    usage: "Use when saving a new URL you want to remember, categorize, or reference later."
    
  get_node:
    name: "get_node"
    description: "Retrieve complete details about a specific URL including all its metadata and when it was added."
    usage: "Use when you need full information about a URL you've previously saved."
    
  update_node:
    name: "update_node"
    description: "Modify the title or description of an existing URL to keep information current and accurate."
    usage: "Use when you want to improve the description or fix the title of a saved URL."
    
  delete_node:
    name: "delete_node"
    description: "Permanently remove a URL and all its associated attributes from the system."
    usage: "Use when a URL is no longer relevant or needed in your collection."
    
  find_node_by_url:
    name: "find_node_by_url"
    description: "Search for a URL within a domain to check if it's already saved and get its metadata."
    usage: "Use before adding a URL to avoid duplicates or to find an existing URL's details."
    
  batch_get_nodes:
    name: "batch_get_nodes"
    description: "Efficiently retrieve multiple URLs at once using their composite IDs for bulk operations."
    usage: "Use when you need information about several URLs simultaneously for analysis or reporting."

  # Attribute Management
  list_attributes:
    name: "list_attributes"
    description: "Get all available attribute types for a domain including their names, types, and descriptions."
    usage: "Use to see what tags and metadata fields are available before adding attributes to URLs."
    
  create_attribute:
    name: "create_attribute"
    description: "Define a new attribute type (tag, number, text, etc.) that can be applied to URLs in a domain."
    usage: "Use when you want to create a new way to categorize or add metadata to your URLs."
    
  get_attribute:
    name: "get_attribute"
    description: "Get detailed information about a specific attribute including its type and validation rules."
    usage: "Use when you need to understand the format or constraints of an attribute before using it."

  # URL Attribute Management
  get_node_attributes:
    name: "get_node_attributes"
    description: "Retrieve all attribute values (tags, metadata) assigned to a specific URL."
    usage: "Use to see how a URL is categorized and what metadata has been added to it."
    
  set_node_attributes:
    name: "set_node_attributes"
    description: "Add or update multiple attribute values for a URL in a single operation."
    usage: "Use when tagging a URL with categories, ratings, notes, or other metadata."
    
  create_node_attribute:
    name: "create_node_attribute"
    description: "Add a single attribute value to a URL, such as a tag, rating, or note."
    usage: "Use when adding one piece of metadata or a single tag to a URL."

  # Server Information
  get_server_info:
    name: "get_server_info"
    description: "Get server capabilities, version information, and configuration details for integration planning."
    usage: "Use to understand what features are available and how to format composite keys."

composite_key_format:
  description: "URLs are identified using composite keys in the format 'domain_name::url_path'"
  examples:
    - "example.com::https://example.com/page1"
    - "github.com::https://github.com/user/repo"
    - "docs.site::https://docs.site/api/reference"
  usage: "Always use the full composite key when referencing URLs in MCP operations."

common_workflows:
  save_and_categorize_url:
    description: "Complete workflow for saving a URL with metadata"
    steps:
      1: "Check if domain exists using list_domains"
      2: "Create domain if needed using create_domain"
      3: "Check if URL already exists using find_node_by_url"
      4: "Create the URL using create_node if not exists"
      5: "Add relevant attributes using set_node_attributes"
      
  research_and_organize:
    description: "Workflow for researching and organizing saved URLs"
    steps:
      1: "Use list_domains to see available categories"
      2: "Use list_nodes with search to find relevant URLs"
      3: "Use get_node_attributes to see how URLs are tagged"
      4: "Use batch_get_nodes for analyzing multiple URLs"
      
  content_curation:
    description: "Workflow for curating and maintaining URL collections"
    steps:
      1: "Use list_attributes to understand tagging system"
      2: "Create new attributes if needed for better organization"
      3: "Update node attributes to improve categorization"
      4: "Use search functionality to find and organize related content"

best_practices:
  domain_organization:
    - "Use domain names that match the website for easy identification"
    - "Create domains for different topics or projects"
    - "Keep domain names short and descriptive"
    
  url_management:
    - "Add descriptive titles and descriptions when saving URLs"
    - "Use the find_node_by_url function to avoid duplicates"
    - "Regular cleanup of outdated or broken URLs"
    
  attribute_usage:
    - "Create consistent attribute naming conventions"
    - "Use appropriate attribute types (tag vs text vs number)"
    - "Maintain ordered attributes for priority or sequence information"
    
  search_optimization:
    - "Include relevant keywords in titles and descriptions"
    - "Use consistent tagging for better findability"
    - "Leverage the search parameter in list operations"