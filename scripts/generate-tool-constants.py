#!/usr/bin/env python3
"""
Generate Go constants from mcp-tools.yaml specification.
Only generates constants that are actually needed at compile time.
"""

import yaml
import sys
from pathlib import Path

def load_spec(spec_path):
    """Load the MCP tools specification."""
    with open(spec_path, 'r', encoding='utf-8') as f:
        return yaml.safe_load(f)

def generate_go_constants(spec_data, output_path):
    """Generate Go constants file."""
    
    go_code = '''// Code generated by scripts/generate-tool-constants.py. DO NOT EDIT.

package constants

// MCP Tool Names - Single source of truth from specs/mcp-tools.yaml
const (
'''
    
    # Generate tool name constants
    tools = spec_data.get('tools', {})
    for tool_name, tool_def in tools.items():
        const_name = f"Tool{tool_name.replace('_', '').title()}"
        go_code += f'\t{const_name} = "{tool_def["name"]}"\n'
    
    go_code += ')\n\n'
    
    # Generate category constants
    go_code += '// MCP Tool Categories\nconst (\n'
    categories = spec_data.get('categories', {})
    for category, description in categories.items():
        const_name = f"Category{category.title()}"
        go_code += f'\t{const_name} = "{category}"\n'
    
    go_code += ')\n\n'
    
    # Generate server info constants
    server_info = spec_data.get('server_info', {})
    if server_info:
        go_code += '// Server Information\nconst (\n'
        if 'composite_key_format' in server_info:
            go_code += f'\tCompositeKeyFormat = "{server_info["composite_key_format"]}"\n'
        if 'version' in server_info:
            go_code += f'\tServerVersion = "{server_info["version"]}"\n'
        go_code += ')\n'
    
    # Write the file
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(go_code)
    
    print(f"Generated Go constants: {output_path}")

def main():
    """Generate Go constants from specification."""
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    
    spec_path = project_root / "specs" / "mcp-tools.yaml"
    output_path = project_root / "internal" / "constants" / "mcp_tools.go"
    
    spec_data = load_spec(spec_path)
    generate_go_constants(spec_data, output_path)
    
    print(f"Tool constants generated: {len(spec_data.get('tools', {}))}")

if __name__ == "__main__":
    main()