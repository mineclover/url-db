#!/usr/bin/env python3
"""
Generate tool name constants from MCP tools specification
Creates Go constants and Python dictionaries from YAML spec
"""

import yaml
import json
from pathlib import Path
from typing import Dict, Any

class ToolConstantsGenerator:
    def __init__(self, spec_path: str):
        self.spec_path = Path(spec_path)
        with open(self.spec_path, 'r') as f:
            self.spec = yaml.safe_load(f)
    
    def generate_go_constants(self) -> str:
        """Generate Go constants file"""
        tools = self.spec['tools']
        categories = self.spec['categories']
        
        go_code = f'''// Code generated from {self.spec_path.name}. DO NOT EDIT.
// Generated by scripts/generate-tool-constants.py

package mcp

// MCP Tool Names - Single source of truth
const (
\t// Server Information
\tServerName    = "{self.spec['server_info']['name']}"
\tServerVersion = "{self.spec['server_info']['version']}"
\tCompositeKeyFormat = "{self.spec['server_info']['composite_key_format']}"

\t// Tool Names
'''
        
        # Group tools by category
        by_category = {}
        for tool_name, tool_spec in tools.items():
            category = tool_spec['category']
            if category not in by_category:
                by_category[category] = []
            by_category[category].append((tool_name, tool_spec))
        
        # Generate constants by category
        for category, category_tools in by_category.items():
            category_title = categories[category]
            go_code += f'\n\t// {category_title}\n'
            
            for tool_name, tool_spec in category_tools:
                const_name = ''.join(word.capitalize() for word in tool_name.split('_')) + 'Tool'
                go_code += f'\t{const_name:<25} = "{tool_spec["name"]}"\n'
        
        go_code += ')\n\n'
        
        # Generate tool registry map
        go_code += '''// GetAllToolNames returns all tool names
func GetAllToolNames() []string {
\treturn []string{
'''
        
        for tool_name, tool_spec in tools.items():
            const_name = ''.join(word.capitalize() for word in tool_name.split('_')) + 'Tool'
            go_code += f'\t\t{const_name},\n'
        
        go_code += '\t}\n}\n\n'
        
        # Generate category mapping
        go_code += '''// ToolCategories maps tool names to categories
var ToolCategories = map[string]string{
'''
        
        for tool_name, tool_spec in tools.items():
            const_name = ''.join(word.capitalize() for word in tool_name.split('_')) + 'Tool'
            go_code += f'\t{const_name}: "{tool_spec["category"]}",\n'
        
        go_code += '}\n'
        
        return go_code
    
    def generate_python_constants(self) -> str:
        """Generate Python constants file"""
        tools = self.spec['tools']
        categories = self.spec['categories']
        
        py_code = f'''# Code generated from {self.spec_path.name}. DO NOT EDIT.
# Generated by scripts/generate-tool-constants.py

"""MCP Tool Names - Single source of truth"""

# Server Information
SERVER_NAME = "{self.spec['server_info']['name']}"
SERVER_VERSION = "{self.spec['server_info']['version']}"
COMPOSITE_KEY_FORMAT = "{self.spec['server_info']['composite_key_format']}"

# Tool Names
'''
        
        # Group tools by category
        by_category = {}
        for tool_name, tool_spec in tools.items():
            category = tool_spec['category']
            if category not in by_category:
                by_category[category] = []
            by_category[category].append((tool_name, tool_spec))
        
        # Generate constants by category
        for category, category_tools in by_category.items():
            category_title = categories[category]
            py_code += f'\n# {category_title}\n'
            
            for tool_name, tool_spec in category_tools:
                const_name = tool_name.upper()
                py_code += f'{const_name} = "{tool_spec["name"]}"\n'
        
        py_code += '\n# Tool Collections\n'
        
        # Generate tool collections
        py_code += 'ALL_TOOLS = [\n'
        for tool_name, tool_spec in tools.items():
            const_name = tool_name.upper()
            py_code += f'    {const_name},\n'
        py_code += ']\n\n'
        
        # Generate category mapping
        py_code += 'TOOL_CATEGORIES = {\n'
        for tool_name, tool_spec in tools.items():
            const_name = tool_name.upper()
            py_code += f'    {const_name}: "{tool_spec["category"]}",\n'
        py_code += '}\n\n'
        
        # Generate category groups
        for category, category_tools in by_category.items():
            category_const = category.upper() + '_TOOLS'
            py_code += f'{category_const} = [\n'
            for tool_name, tool_spec in category_tools:
                const_name = tool_name.upper()
                py_code += f'    {const_name},\n'
            py_code += ']\n\n'
        
        return py_code
    
    def generate_json_schema(self) -> str:
        """Generate JSON schema for tools"""
        schema = {
            "version": self.spec["version"],
            "server_info": self.spec["server_info"],
            "tools": {},
            "categories": self.spec["categories"]
        }
        
        for tool_name, tool_spec in self.spec["tools"].items():
            schema["tools"][tool_name] = {
                "name": tool_spec["name"],
                "category": tool_spec["category"],
                "description": tool_spec["description"],
                "parameters": tool_spec["parameters"]
            }
        
        return json.dumps(schema, indent=2)
    
    def write_files(self, output_dir: Path):
        """Write all generated files"""
        output_dir.mkdir(exist_ok=True)
        
        # Go constants
        go_file = output_dir / "tool_constants.go"
        with open(go_file, 'w') as f:
            f.write(self.generate_go_constants())
        print(f"‚úÖ Generated Go constants: {go_file}")
        
        # Python constants
        py_file = output_dir / "tool_constants.py"
        with open(py_file, 'w') as f:
            f.write(self.generate_python_constants())
        print(f"‚úÖ Generated Python constants: {py_file}")
        
        # JSON schema
        json_file = output_dir / "mcp_tools_schema.json"
        with open(json_file, 'w') as f:
            f.write(self.generate_json_schema())
        print(f"‚úÖ Generated JSON schema: {json_file}")

def main():
    """Generate tool constants from specification"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Generate MCP tool constants from YAML spec")
    parser.add_argument("--spec", "-s", default="specs/mcp-tools.yaml", help="Path to MCP tools spec")
    parser.add_argument("--output", "-o", default="generated", help="Output directory")
    
    args = parser.parse_args()
    
    spec_path = Path(args.spec)
    if not spec_path.exists():
        print(f"‚ùå Spec file not found: {spec_path}")
        return 1
    
    generator = ToolConstantsGenerator(spec_path)
    output_dir = Path(args.output)
    
    generator.write_files(output_dir)
    
    print("\\nüéâ Successfully generated tool constants!")
    print("\\nNext steps:")
    print(f"1. Copy generated/tool_constants.go to internal/mcp/")
    print(f"2. Copy generated/tool_constants.py to tests/python/")
    print(f"3. Update imports in Go and Python code")
    
    return 0

if __name__ == "__main__":
    exit(main())